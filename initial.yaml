# Template Setup for Smart Gate Controller Devices

esphome:
  name: smart-gate-controller
  friendly_name: GateControl

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  
# Enable Home Assistant API
api:
  # encryption:
  #   key: "Em8MOUt3Xy1fLR9fxNCd025YXMUpgADyTrW9b/9POp4="

ota:
  - platform: esphome
    # password: !secret ota_password

wifi:
  ssid: [YOUR_SSID]
  password: [YOUR_WIFI_PASSWORD]
  # If you want to configure a static IP, edit this section.
  # Alternatively a DHCP IP Should be assigned to the device
  # manual_ip:
  #   static_ip: [YOUR_STATIC_IP]
  #   gateway: [YOUR_GATEWAY]
  #   subnet: [YOUR_SUBNET]
  #   dns1: [YOUR_DNS]
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  # Please update this password to something difficult...
  ap:
    ssid: "GateController"
    password: "password"

captive_portal:

web_server:
  port: 80
  auth:
    username: admin
    password: [ADMIN_PASSWORD]

output:
  - platform: gpio
    pin: GPIO32
    id: led_output
  - platform: gpio
    pin: GPIO12
    id: relay
  - platform: gpio
    pin: GPIO5
    id: relay_2
    
button:
  - platform: output
    output: relay
    id: button_1
    disabled_by_default: True
    duration: 1000ms
    name: "Open / Close"
    icon: mdi:gate
  - platform: output
    output: relay_2
    id: button_2
    duration: 1000ms
    name: "Pedestrian"
    icon: "mdi:walk"

cover:
  - platform: template
    name: "Gate"
    device_class: gate
    id: gate
    lambda: |-
      if (id(status).state == "Open") {
        return COVER_OPEN;
      } else if (id(status).state == "Closed") {
        return COVER_CLOSED;
      } else {
        return {};
      }
    open_action: 
      - button.press: button_1
    close_action: 
      - button.press: button_1
    stop_action: 
      - button.press: button_1
    optimistic: False

light:
  - platform: binary
    name: "Flashing LED"
    output: led_output
    internal: True
    id: led
    restore_mode: ALWAYS_OFF

binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO14
      mode: 
        input: True
    name: "Gate Open/Close"
    id: gate_status
    device_class: door
    entity_category: diagnostic
    disabled_by_default: True
    publish_initial_state: True
    internal: True
    on_state: 
      then:
        - if:
            condition:
              - binary_sensor.is_off: gate_status 
            then:
              - light.turn_off: led
            else:
              - light.turn_on: led
    filters:
      - delayed_on_off: 150ms
    on_multi_click: 
      - timing: # Closed
          - OFF for at least 2000ms
        then:
          - logger.log: "Closed"
          - text_sensor.template.publish:
              id: status
              state: "Closed"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_IDLE;
              id(gate).publish_state();
        invalid_cooldown: 100ms
      - timing: # Open
          - ON for at least 2000ms
        then:
          - logger.log: "Open"
          - text_sensor.template.publish:
              id: status
              state: "Open"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_IDLE;
              id(gate).publish_state();
        invalid_cooldown: 100ms
      - timing: # Closing
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        then:
          - logger.log: "Closing"
          - text_sensor.template.publish:
              id: status
              state: "Closing"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_CLOSING;
              id(gate).publish_state();
        invalid_cooldown: 100ms
      - timing: # Opening
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
        then:
          - logger.log: "Opening"
          - text_sensor.template.publish:
              id: status
              state: "Opening"
          - lambda: |- 
              id(gate).current_operation = CoverOperation::COVER_OPERATION_OPENING;
              id(gate).publish_state();
        invalid_cooldown: 100ms
      - timing: # No Mains Power
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 1200ms to 1400ms
        then:
          - logger.log: "No Mains"
          - text_sensor.template.publish:
              id: status
              state: "No Mains"
        invalid_cooldown: 100ms
      - timing: # Battery Low
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 500ms to 1000ms
        then:
          - logger.log: "Low Battery"
          - text_sensor.template.publish:
              id: status
              state: "Low Battery"
        invalid_cooldown: 100ms
sensor:
  - platform: wifi_signal
    name: "Wifi Signal"
    update_interval: 600s
  # Uptime sensor
  - platform: uptime
    name: Uptime

text_sensor:
  - platform: template
    icon: mdi:infomation-outline
    id: status
    name: "Status"
  - platform: version
    name: "Version"
  # Expose Wifi information as a sensor
  - platform: wifi_info
    ip_address:
      name: IP
      id: ip_address
    ssid:
      name: SSID
    bssid:
      name: BSSID
      id: wifi_mac_address



interval:
  - interval: 5s
    then:
      - if:
          condition:
            not:
              - wifi.connected:   
          then:
            - output.turn_on: led_output
            - delay: 500ms
            - output.turn_off: led_output
